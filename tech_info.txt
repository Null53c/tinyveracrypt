TrueCrypt versions and features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Notable new features in TrueCrypt versions:

* <2.0: (h2) Hash sha1 added.
* 2.0: (h2) Cipher aes-cbc-tcw added.
* 2.1: (h2) Hash ripemd160 added.
* 4.0: (h2) Hash whirlpool added.
* 4.1: (h2) Cipher aes-lrw-benbi added.
* 4.3: (h2) Can't create aes-cbc-tcw anymore, but can still open them.
* 5.0: (h3) Cipher aes-xts-plain64 added. Hash sha512 added. Added decrypted_size (offset 100) field, but TrueCrypt 7.1a still ignores it for h3 5.0 volumes (because of LegacyVolume is true).
* 6.0: (h4) First non-legacy header format. Supports decrypted_ofs != 512. Removed volume creation time and header creation time fields. Added CRC-32 field for the non-keytable encrypted header region. Added flags field.
* 7.0: (h5) Added sector size field. Added sector size field.
* 7.1a: (h5) Last version which supports volume creation.
* 7.2: (h5) Removed encrypted volume creation.
* VeraCrypt: (h5) Changed signature from 'TRUE' to 'VERA'. Removed ciphers other than aes-xts-plain64, can't even open such encrypted volumes.

More details: https://github.com/DrWhax/truecrypt-archive/blob/master/doc/Version-History.md

TrueCrypt header format
~~~~~~~~~~~~~~~~~~~~~~~
Based on TrueCrypt 7.1a Source/Common/Volumes.c.

Offset	Length	Description
--------------------------------
Unencrypted:
0		64	Salt (h2--h5)
Encrypted:
64		4	Signature: ASCII string 'TRUE' (h2--h5, non-VeraCrypt), 'VERA' (VeraCrypt)
68		2	Header version: 2 (TrueCrypt < 5.0) (h2), 3 (5.0 <= TrueCrypt < 6.0), 4 (6.0 <= TrueCrypt < 7.0) or 5 (7.0 <= TrueCrypt, VeraCrypt) (h2--h5)
70		2	Required program version: major << 8 | minor; >=0x600 makes a difference (non-legacy volume) (h2--h5)
72		4	CRC-32 checksum of the (decrypted) bytes 256-511 (h2--h5)
76		8	Volume creation time (h2--h3); must be 0 (h4--h5)
84		8	Header creation time (h2--h3); must be 0 (h4--h5)
92		8	Size of hidden volume in bytes (0 = normal volume) (h2--h5)
100		8	Size of the decrypted volume in bytes (identical with field 92 for hidden volumes, valid if h3 or field 70 >= 0x600 or flag bit 0 == 1) (h3--h5); must be 0 (h2)
108		8	Byte offset of the start of the master key scope (valid if field 70 >= 0x600 or flag bit 0 == 1) (h4--h5); Start byte offset of the encrypted area of the volume (h3); must be 0 (h2)
116		8	Size of the encrypted area within the master key scope (valid if field 70 >= 0x600 or flag bit 0 == 1) (h4--h5); Size of the encrypted area of the volume in bytes (h3); must be 0 (h2)
124		4	Flags: bit 0 set = system encryption; bit 1 set = non-system in-place encryption, bits 2-31 are reserved (set to zero) (h4--h5); must be 0 (h2--h3)
128		4	Sector size in bytes, typically 512, default for earlier versions is 512 (h5); must be 0 (h2--h4)
132		120	Reserved (must contain zeroes) (h2--h5)
252		4	CRC-32 checksum of the (decrypted) bytes 64..251 (h4--h5)
256		256	XTS: master keys: primary key (32 bytes for AES) + secondary key (32 bytes for AES) (typically h3--h5)
                        LRW: LRW multiplication key (16 bytes) + ignored (16 bytes) + master key (32 bytes for AES) (typically h2)
                        CBC (TCW): IV (16 bytes for AES) + whitening (16 bytes for AES) + master key (32 bytes for AES) (typically h2)

More details:
https://gitlab.com/cryptsetup/cryptsetup/wikis/TrueCryptOnDiskFormat
(contains all encryption, hash, count etc. for TrueCrypt, but not for
VeraCrypt)

More details:
http://blog.bjrn.se/2008/01/truecrypt-explained.html : TrueCrypt 4.1, LRW.
Includes functional Python code (which is compatible with truecrypt,
cryptsetup and tinyveracrypt).

More details:
http://blog.bjrn.se/2008/02/truecrypt-explained-truecrypt-5-update.html :
TrueCrypt 5.0, XTS.
Includes functional Python code (which is compatible with truecrypt,
cryptsetup and tinyveracrypt).

VeraCrypt header format
~~~~~~~~~~~~~~~~~~~~~~~
--- 0: VeraCrypt hd sector starts here
0 + 64: salt
--- 64: header starts here
64 + 4: signature: "VERA": 56455241 or "TRUE"; for TrueCrypt: --pim=-14 (iterations == 1000), --encryption=aes, --hash=sha512, introduced in TrueCrypt 5.0.
68 + 2: header_format_version: Volume header format version: 0005
70 + 2: minimum_version_to_extract: Minimum program version to open (1.11): 010b
72 + 4: keytablep_crc32: CRC-32 of the keytable + keytablep (decrypted bytes 256..511): ????????
76 + 16: zeros16: 00000000000000000000000000000000
92 + 8: hidden_volume_size: size of hidden volume (0 for non-hidden): 0000000000000000
100 + 8: decrypted_size: size of decrypted volume: ????????????????
108 + 8: decrypted_ofs: offset of encrypted area from 0 (beginning of salt), i.e. byte offset of the master key scope (typically 0x20000): 0000000000020000
116 + 8: decrypted_size_b: size of the encrypted area within the master key scope (same as size of the decrypted volume): ????????????????
124 + 4: flag_bits: flag bits (0): 00000000
128 + 4: sector_size: sector size (512 -- shouldn't it be 4096?): 00000200
132 + 120: zeros120: 00..00
--- 252: header ends here
252 + 4: header_crc32: CRC-32 of header
256 + 64: keytable (used as key by `dmsetup table' after hex-encoding)
320 + 192: keytable_padding: typically zeros, but can be anything: 00..00
--- 512: VeraCrypt hd sector ends here

More details: https://www.veracrypt.fr/en/VeraCrypt%20Volume%20Format%20Specification.html

More details: https://www.veracrypt.fr/en/Encryption%20Algorithms.html

More details: https://www.veracrypt.fr/en/Hash%20Algorithms.html

Fake filesystem with label and UUID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A LUKS1 (--type=luks) encrypted volume is detectable (without opening it) by blkid(8) and
`budybox blkid', because the LUKS header has a UUID. It doesn't have a
volume label though.

A TrueCrypt or VeraCrypt encrypted volume doesn't have a UUID or label, but
we could add a fake non-encrypted filesystem to it to compensate. The
`tinyveracrypt.py init --fake-luks-uuid=...' does exactly that. The UUID is
stored at offset 160 (0xa0), and it fits to unused bytes of the VeraCrypt header.
The LUKS header doesn't have a volume label though.

If we want both a UUID and a volume label, we should consider other
filesystems, see some details on https://github.com/pts/pts-setfsid . JFS is
a likely candidate with both UUID and volume label in the 0x8000..0x8200
region, way head of the default decrypted_ofs (--ofs=) value of 0x20000.
As a TODO, --fake-jfs-label=... and --fake-jfs-uuid=... will be added to
`tinyveracrypt.py init'.

Can we have it with --ofs=0 ? Only if it doesn't conflict with the encrypted
filesystem headers. For example, reiserfs
(http://jcoppens.com/univ/data/pdf/fs/reiserfs.pdf) has 0x10000 bytes free
(reserved for the bootloader) at the beginning, and brfs also has >=0x10000
bytes free. So the fake JFS header fits easily there. ext2, ext3 and ext4
(https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout)
only have the first 0x400 bytes free (also reserved for the bootloader), and
then comes the superblock. Thus a fake JFS header doesn't fit.

We may want to play with marking ext4 blocks as bad (via `mkfs.ext4 -l
badblocks.lst'), but that's problematic:

* For large filesystems, the first few blocks (e. g. 1..34) must be good,
  because they contain the group descriprors.
* block size can be (`mkfs.ext4 -b ...') 1024, 2048 or 4096 bytes.
* So marking block 32 with the fake JFS header bad won't work (beause
  it overlaps with the group descriptors) for ext2, ext3, ext4 filesystems
  of at least about 8 GiB in size for `mkfs.ext4 -b 1024', or 120 GiB for
  `mkfs.ext4 -b 4096'.
* Instead of a fake JFS header, we may want to add a fake btrfs header
  (in superblock 0x10000...0x10400). That would for up to 241 GiB of ext4
  filesystem with block size of 4096.
* `fsck.ext4 -c' clears the bad blocks list, there is no way to mark some
  blocks as bad permanently.
* FYI The backup superblock and backup group descriptsors in block
  32768 shouldn't contain bad blocks, `fsck.ext4' warns if they do.

We could also try to put the fake filesystem headers to an unmovable file on
the filesystem (i.e. a file which the defragmenters are not allowed to
touch; typically boot files with a blocklist). Unfortunately ext4 doesn't
have this feature, e4defrag(8) will happily move around just any file (even
those with `chattr +i').

Some space in the group descriptor table (GDT) near the beginning of the
ext2, ext3 or ext4 filesystem is reserved for growth, i.e. it is unused and
ignored. More info:

* See `mkfs.ext2 -E resize=...' to control how many blocks are reserved.
* Example:

    $ python -c 'open("bigext4.img", "wb").truncate(8 << 30)'
    $ mkfs.ext4 -b 1024 -E nodiscard -F bigext4.img
    $ dumpe2fs bigext4.img >bigext4.dump
    Primary superblock at 1, Group descriptors at 2-33
    Reserved GDT blocks at 34-289

* An ext4 filesystem with block size of 4096 bytes and size of 241 GiB would
  have ``Reserved GDT blocks at 16-1024''. Thus block 16 is unused,
  we can but the fake btrfs header there (in superblock 0x10000...0x10400).
  If the ext4 filesystem grows beyond that, the reserved GDT block 16 will
  become an actual GDT block, and not available for us to change.

* There are at at least 256 of them, even for smaller filesystems.

* They must finish by the end of block 1050. (Why?)

* btrfs has a backup superblock at 64 MiB (0x4000000...0x4000400). At block
  size 4096, this is ext4 block 16384. To put this block to the
  ``Reserved GDT blocks'' of block group 1, we can play with `mkfs.ext4
  -g ...' (blocks per block group) setting, but it may have a performance
  penalty on SSDs (if not aligned to 6 MiB boundary). Example:

    $ python -c 'f = open("ext2.img", "wb"); f.truncate(240 << 30)' &&
      mkfs.ext4 -E nodiscard -g 16304 -F ext2.img &&
      dumpe2fs ext2.img >ext4.dump

__END__
